// <auto-generated />
using System;
using JobJournal.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobJournal.Server.Migrations
{
    [DbContext(typeof(JobJournalContext))]
    [Migration("20200807221333_Add_OtherJobApplicationMethod_Specification_Field_and_Change_Comments_to_Notes")]
    partial class Add_OtherJobApplicationMethod_Specification_Field_and_Change_Comments_to_Notes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobJournal.Shared.ApplicationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Method = "Direct (Online)"
                        },
                        new
                        {
                            Id = 2,
                            Method = "Direct (Email)"
                        },
                        new
                        {
                            Id = 3,
                            Method = "Direct (In-Person)"
                        },
                        new
                        {
                            Id = 4,
                            Method = "Recruiter"
                        },
                        new
                        {
                            Id = 5,
                            Method = "Friend"
                        },
                        new
                        {
                            Id = 6,
                            Method = "LinkedIn"
                        },
                        new
                        {
                            Id = 7,
                            Method = "Indeed"
                        },
                        new
                        {
                            Id = 8,
                            Method = "Monster"
                        },
                        new
                        {
                            Id = 9,
                            Method = "Other"
                        });
                });

            modelBuilder.Entity("JobJournal.Shared.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Applied"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Interviewing"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Declined"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Rejected"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Ghosted"
                        },
                        new
                        {
                            Id = 6,
                            Status = "Hired"
                        });
                });

            modelBuilder.Entity("JobJournal.Shared.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteURI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad94a572-5104-4303-82f7-fac0a7d06897"),
                            City = "Muscatine",
                            CompanyName = "Schwabenlander.com",
                            EmailAddress = "sean@schwabenlander.com",
                            Notes = "Great company to work for.",
                            PhoneNumber = "(202) 794-0474",
                            State = "IA",
                            UserId = new Guid("9b27e7b5-1acf-42c8-919a-6394fd1ddfe8"),
                            WebsiteURI = "https://www.schwabenlander.com"
                        });
                });

            modelBuilder.Entity("JobJournal.Shared.CompanyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MostRecentContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyContact");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e98b65b-c56d-470d-b509-148ac693a013"),
                            CompanyId = new Guid("ad94a572-5104-4303-82f7-fac0a7d06897"),
                            EmailAddress = "sean@schwabenlander.net",
                            FirstContactDate = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Sean Schwabenlander",
                            JobTitle = "CEO",
                            Notes = "Sean's a great guy and a handsome fellow.",
                            PhoneNumber = "(612) 810-4212",
                            UserId = new Guid("9b27e7b5-1acf-42c8-919a-6394fd1ddfe8")
                        });
                });

            modelBuilder.Entity("JobJournal.Shared.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApplicationMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherApplicationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationMethodId");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobApplication");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58e55e99-cbad-4c93-b804-fe8c265f9835"),
                            ApplicationDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ApplicationMethodId = 3,
                            ApplicationStatusId = 1,
                            CompanyId = new Guid("ad94a572-5104-4303-82f7-fac0a7d06897"),
                            JobTitle = "Engineer",
                            Notes = "This is my dream job.",
                            UserId = new Guid("9b27e7b5-1acf-42c8-919a-6394fd1ddfe8")
                        });
                });

            modelBuilder.Entity("JobJournal.Shared.CompanyContact", b =>
                {
                    b.HasOne("JobJournal.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobJournal.Shared.JobApplication", b =>
                {
                    b.HasOne("JobJournal.Shared.ApplicationMethod", "ApplicationMethod")
                        .WithMany()
                        .HasForeignKey("ApplicationMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobJournal.Shared.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobJournal.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
