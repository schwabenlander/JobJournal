@page "/company/{id:guid}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize]

@if (Company == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="card">
        <h3 class="card-header">@Company.CompanyName</h3>
        <div class="card-body">
            <h5 class="card-title">@Company.City, @Company.State</h5>
            <p class="card-text">
                <table>
                    <tbody>
                        <tr>
                            <td>Website URL: </td>
                            <td><a href="@Company.WebsiteURI" target="_blank">@Company.WebsiteURI</a></td>
                        </tr>
                        <tr>
                            <td>Phone Number: </td>
                            <td>@Company.PhoneNumber</td>
                        </tr>
                        <tr>
                            <td>E-mail Address: </td>
                            <td><a href="mailto:@Company.EmailAddress">@Company.EmailAddress</a></td>
                        </tr>
                    </tbody>
                </table>
            </p>
            <button type="button" class="btn btn-outline-primary" @onclick="GoBack"><i class="fas fa-arrow-alt-circle-left"></i></button>
            <button type="button" class="btn btn-outline-primary">Add Job Application</button>
            <button type="button" class="btn btn-outline-secondary" @onclick="Edit">Edit</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Delete">Delete</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    private ClaimsPrincipal principal;

    private Guid UserId { get; set; }

    CompanyDTO Company { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        principal = (await authState).User;
        UserId = Guid.Parse(principal.FindFirst("oid").Value);
        Company = await Http.GetFromJsonAsync<CompanyDTO>($"api/company/{Id.ToString()}");
    }

    protected void GoBack(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"company/all");
    }

    protected void Edit(MouseEventArgs args)
    {
        Console.WriteLine($"Editing company: {Company.CompanyName}");
    }

    protected void Delete(MouseEventArgs args)
    {
        Console.WriteLine($"Deleting company: {Company.CompanyName}");
    }
}
