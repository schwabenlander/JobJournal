@page "/company/{CompanyId:guid}/contact/{ContactId:guid}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]

    <CascadingValue Value="UserId" IsFixed="true">
        @if (CompanyContact != null)
        {
            <EditContactDialog @ref="EditModal" Contact="CompanyContact" OnEditContactSaved="ContactUpdated" />
            <DeleteContactDialog @ref="DeleteModal" Contact="CompanyContact" OnContactDeleted="ContactDeleted" />

            <h1>@CompanyContact.FullName</h1>
            <h3>@CompanyContact.CompanyName</h3>

            <button type="button" class="btn btn-secondary" @onclick="NavigateToCompanyContacts">
                <i class="fas fa-arrow-left"></i>
            </button>
            <button class="btn btn-primary" @onclick="Update">Edit</button>
            <button class="btn btn-danger" @onclick="Delete">Delete</button>

            <hr />

            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-2">
                        <strong>Job Title:</strong>
                    </div>
                    <div class="col-lg-10">
                        @CompanyContact.JobTitle
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-2">
                        <strong>E-mail Address:</strong>
                    </div>
                    <div class="col-lg-10">
                        <a href="mailto:@CompanyContact.EmailAddress">@CompanyContact.EmailAddress</a>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-2">
                        <strong>Telephone Number:</strong>
                    </div>
                    <div class="col-lg-10">
                        <a href="tel:@GetTelephoneDigits(CompanyContact.PhoneNumber)">@CompanyContact.PhoneNumber</a>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-2">
                        <strong>First Contact:</strong>
                    </div>
                    <div class="col-lg-10">
                        @if (CompanyContact.FirstContactDate == null)
                        {
                            <text>N/A</text>
                        }
                        else
                        {
                            @CompanyContact.FirstContactDate?.ToShortDateString()
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-2">
                        <strong>Most Recent Contact:</strong>
                    </div>
                    <div class="col-lg-10">
                        @if (CompanyContact.MostRecentContactDate == null)
                        {
                            <text>N/A</text>
                        }
                        else
                        {
                            @CompanyContact.MostRecentContactDate?.ToShortDateString()
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-2">
                        <strong>Comments:</strong>
                    </div>
                    <div class="col-lg-10">
                        @CompanyContact.Comments
                    </div>
                </div>
            </div>
        }
        else
        {
            <LoadingIndicator />
        }
    </CascadingValue>

@code {
    [Inject]
    public ICompanyContactDataService ContactDataService { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }

    private ClaimsPrincipal principal;

    private Guid UserId { get; set; }

    [Parameter]
    public Guid CompanyId { get; set; }

    [Parameter]
    public Guid ContactId { get; set; }

    CompanyContactDTO CompanyContact { get; set; }

    EditContactDialog EditModal { get; set; }
    DeleteContactDialog DeleteModal { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        principal = (await authState).User;
        UserId = Guid.Parse(principal.FindFirst("oid").Value);

        CompanyContact = await ContactDataService.GetCompanyContactAsync(ContactId);
    }

    protected void Update()
    {
        Console.WriteLine($"Updating contact: {CompanyContact.FullName}");
        EditModal.Show();
    }

    protected void Delete()
    {
        Console.WriteLine($"Deleting contact: {CompanyContact.FullName}");
        DeleteModal.Show();
    }

    public void ContactUpdated(CompanyContactDTO contact)
    {
        Console.WriteLine($"{contact.FullName} was updated in the database");
    }

    public void ContactDeleted(CompanyContactDTO contact)
    {
        Console.WriteLine($"{contact.FullName} was removed from the database");
        NavigateToCompanyContacts();
    }

    protected void NavigateToCompanyContacts()
    {
        NavigationManager.NavigateTo($"/company/{CompanyId}/contacts");
    }

    string GetTelephoneDigits(string phoneNumber)
    {
        // Source: https://kaliko.com/blog/c-remove-all-non-numeric-characters/
        return Regex.Replace(phoneNumber, "[^.0-9]", "");
    }
}
