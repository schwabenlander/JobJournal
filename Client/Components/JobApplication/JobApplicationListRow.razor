@inject NavigationManager NavigationManager

<DeleteJobApplicationDialog @ref="DeleteModal" JobApplication="JobApplication" OnJobApplicationDeleted="JobApplicationDeleted" />
<EditJobApplicationDialog @ref="EditModal" JobApplication="JobApplication" OnEditJobApplicationSaved="JobApplicationUpdated" />

<tr class="@rowCssClass">
    <th scope="row">@JobApplication.JobTitle</th>
    <td>@JobApplication.CompanyName</td>
    <td>@JobApplication.ApplicationDate.ToShortDateString()</td>
    <td>
        @if (JobApplication.ApplicationStatusId == 5)
        {
            <i class="fas fa-ghost"></i>
        }
        @JobApplication.ApplicationStatus
    </td>
    <td>
        <button type="button" class="btn btn-primary" @onclick="ToggleDetails"><i class="@detailsIcon"></i> Info</button>
        <button type="button" class="btn btn-success" @onclick="NavigateToJobApplicationDetails"><i class="fas fa-info-circle"></i> Details</button>
        <button type="button" class="btn btn-secondary" @onclick="Update"><i class="fas fa-pencil-alt"></i> Edit</button>
        <button type="button" class="btn btn-danger" @onclick="Delete"><i class="fas fa-trash-alt"></i> Delete</button>
    </td>
</tr>
@if (showDetails)
{
    <JobApplicationDetailsRow JobApplication="JobApplication" RowCssClass="rowCssClass" OnHideDetails="ToggleDetails" />
}

@code {
    DeleteJobApplicationDialog DeleteModal { get; set; }
    EditJobApplicationDialog EditModal { get; set; }

    string rowCssClass = "";

    [Parameter]
    public JobApplicationDTO JobApplication { get; set; }

    [Parameter]
    public EventCallback<bool> OnRowChanged { get; set; }

    protected override void OnParametersSet()
    {
        switch (JobApplication.ApplicationStatusId)
        {
            case 1:
                rowCssClass = "";
                break;
            case 2:
                rowCssClass = "table-primary";
                break;
            case 3:
                rowCssClass = "table-dark";
                break;
            case 4:
                rowCssClass = "table-danger";
                break;
            case 5:
                rowCssClass = "table-warning";
                break;
            case 6:
                rowCssClass = "table-success";
                break;
            default:
                rowCssClass = "";
                break;
        }
    }

    private bool showDetails { get; set; } = false;
    private string detailsIcon { get; set; } = "oi oi-caret-bottom";

    protected void ToggleDetails()
    {
        showDetails = !showDetails;

        if (showDetails)
            detailsIcon = "oi oi-caret-top";
        else
            detailsIcon = "oi oi-caret-bottom";

        InvokeAsync(StateHasChanged);
    }

    protected void Update()
    {
        Console.WriteLine($"Updating job application: {JobApplication.JobTitle}");
        EditModal.Show();
    }

    protected void Delete()
    {
        Console.WriteLine($"Deleting job application: {JobApplication.JobTitle}");
        DeleteModal.Show();
    }

    public async Task JobApplicationUpdated(JobApplicationDTO jobApplication)
    {
        Console.WriteLine($"{jobApplication.JobTitle} was updated in the database");
        await OnRowChanged.InvokeAsync(true);
    }

    public async Task JobApplicationDeleted(JobApplicationDTO jobApplication)
    {
        Console.WriteLine($"{jobApplication.JobTitle} was removed from the database");
        await OnRowChanged.InvokeAsync(true);
    }

    protected void NavigateToJobApplicationDetails()
    {
        NavigationManager.NavigateTo($"/jobapplication/{JobApplication.Id}");
    }
}
