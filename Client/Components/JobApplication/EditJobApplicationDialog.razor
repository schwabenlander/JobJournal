<ModalDialog @ref="Modal" ModalTitle="Edit Job Application">
    <ModalContent>
        <EditForm Model="JobApplication" OnValidSubmit="HandleValidSubmit">

            <DataAnnotationsValidator />
            <div class="alert alert-info" role="alert">Please complete the form below. All fields are required.</div>

            <div class="form-group">
                <label for="companyId">Company: </label>
                <span>@JobApplication.CompanyName</span>
            </div>

            <div class="form-group">
                <label for="jobTitle">Job Title: </label>
                <InputText id="jobTitle" class="form-control" @bind-Value="JobApplication.JobTitle" placeholder="Job Title"></InputText>
                <ValidationMessage For="@(() => JobApplication.JobTitle)" />
            </div>

            <div class="form-group">
                <label for="applicationDate">Date of Application: </label>
                <InputDate id="applicationDate" class="form-control" @bind-Value="JobApplication.ApplicationDate"></InputDate>
                <ValidationMessage For="@(() => JobApplication.ApplicationDate)" />
            </div>

            <div class="form-group">
                <label for="methodId">Method: </label>
                <InputSelectNumber id="methodId" class="form-control" @bind-Value="JobApplication.ApplicationMethodId">
                    @foreach (var method in ApplicationMethods)
                    {
                        <option value="@method.Id">@method.Method</option>
                    }
                </InputSelectNumber>
                <ValidationMessage For="@(() => JobApplication.ApplicationMethodId)" />
            </div>

            <div class="form-group">
                <label for="statusId">Status: </label>
                <InputSelectNumber id="statusId" class="form-control" @bind-Value="JobApplication.ApplicationStatusId">
                    @foreach (var status in ApplicationStatuses)
                    {
                        <option value="@status.Id">@status.Status</option>
                    }
                </InputSelectNumber>
                <ValidationMessage For="@(() => JobApplication.ApplicationStatusId)" />
            </div>

            <div class="form-group">
                <label for="comments">Comments: </label>
                <InputTextArea id="comments" class="form-control" @bind-Value="JobApplication.Comments" placeholder="Comments"></InputTextArea>
                <ValidationMessage For="@(() => JobApplication.Comments)" />
            </div>

            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Submit</button>
                <button type="button" class="btn btn-outline-primary" @onclick="Hide">Cancel</button>
            </div>
        </EditForm>
    </ModalContent>
</ModalDialog>

@code {
    [CascadingParameter]
    public Guid UserId { get; set; }

    [Parameter]
    public EventCallback<JobApplicationDTO> OnEditJobApplicationSaved { get; set; }

    [Inject]
    public IJobApplicationDataService JobApplicationDataService { get; set; }

    List<ApplicationStatusDTO> ApplicationStatuses { get; set; } = new List<ApplicationStatusDTO>();

    List<ApplicationMethodDTO> ApplicationMethods { get; set; } = new List<ApplicationMethodDTO>();

    [Parameter]
    public JobApplicationDTO JobApplication { get; set; } = new JobApplicationDTO();

    public ModalDialog Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ApplicationMethods = (await JobApplicationDataService.GetApplicationMethodsAsync()).ToList();
        ApplicationStatuses = (await JobApplicationDataService.GetApplicationStatusesAsync()).ToList();
    }

    public void ResetDialog()
    {
        JobApplication = new JobApplicationDTO();
    }

    public async Task HandleValidSubmit()
    {
        JobApplication.UserId = UserId;

        await JobApplicationDataService.UpdateJobApplicationAsync(JobApplication);
        await Hide();

        await OnEditJobApplicationSaved.InvokeAsync(JobApplication);
    }

    public async Task Hide()
    {
        await Modal.Hide();
    }

    public void Show()
    {
        Modal.Show();
    }
}
