@inject HttpClient Http
@inject NavigationManager NavigationManager

<DeleteCompanyDialog Company="Company" OnCompanyDeleted="CompanyDeleted"></DeleteCompanyDialog>

<tr>
    <th scope="row">@Company.CompanyName</th>
    <td>@Company.City</td>
    <td>@Company.State</td>
    <td>
        <button type="button" class="btn btn-outline-primary" @onclick="ToggleDetails">Details <i class="@detailsIcon"></i></button>
        <button type="button" class="btn btn-outline-secondary" @onclick="Edit">Edit</button>
        <button type="button" class="btn btn-outline-danger" @onclick="Delete">Delete</button>
    </td>
</tr>
@if (showDetails)
{
    <CompanyDetailsRow Company="Company" OnHideDetails="ToggleDetails" />
}

@code {
    [Parameter]
    public CompanyDTO Company { get; set; }

    ModalDialog DeleteModal { get; set; }

    private bool showDetails { get; set; } = false;
    private string detailsIcon { get; set; } = "oi oi-caret-bottom";

    protected void Details()
    {
        NavigationManager.NavigateTo($"company/{Company.Id}");
    }

    protected void ToggleDetails()
    {
        showDetails = !showDetails;

        if (showDetails)
            detailsIcon = "oi oi-caret-top";
        else
            detailsIcon = "oi oi-caret-bottom";

        InvokeAsync(StateHasChanged);
    }

    protected void Edit()
    {
        Console.WriteLine($"Editing company: {Company.CompanyName}");
    }

    protected void Delete()
    {
        Console.WriteLine($"Deleting company: {Company.CompanyName}");
        DeleteModal.Show();
    }

    public async Task CompanyDeleted(CompanyDTO company)
    {
        //Company = null;
        Console.WriteLine($"{company.CompanyName} was removed from the database");
        await InvokeAsync(StateHasChanged);
    }
}
