@inject HttpClient Http
@inject NavigationManager NavigationManager

<DeleteCompanyDialog @ref="DeleteModal" Company="Company" OnCompanyDeleted="CompanyDeleted"></DeleteCompanyDialog>
<EditCompanyDialog @ref="EditModal" Company="Company" OnEditCompanySaved="CompanyUpdated"></EditCompanyDialog>

<tr>
    <th scope="row">@Company.CompanyName</th>
    <td>@Company.City, @Company.State</td>
    <td>
        <button type="button" class="btn btn-primary" @onclick="ToggleDetails"><i class="@detailsIcon"></i> Details</button>
        <button type="button" class="btn btn-success" @onclick="NavigateToContacts"><i class="fas fa-user-friends"></i> Contacts</button>
        <button type="button" class="btn btn-secondary" @onclick="Update"><i class="fas fa-edit"></i> Edit</button>
        <button type="button" class="btn btn-danger" @onclick="Delete"><i class="fas fa-trash-alt"></i> Delete</button>
    </td>
</tr>
@if (showDetails)
{
    <CompanyDetailsRow Company="Company" OnHideDetails="ToggleDetails" />
}

@code {
    [Parameter]
    public CompanyDTO Company { get; set; }

    [Parameter]
    public EventCallback<bool> OnRowChanged { get; set; }

    DeleteCompanyDialog DeleteModal { get; set; }

    EditCompanyDialog EditModal { get; set; }

    private bool showDetails { get; set; } = false;
    private string detailsIcon { get; set; } = "oi oi-caret-bottom";

    protected void NavigateToContacts()
    {
        NavigationManager.NavigateTo($"company/{Company.Id}/contacts");
    }

    protected void ToggleDetails()
    {
        showDetails = !showDetails;

        if (showDetails)
            detailsIcon = "oi oi-caret-top";
        else
            detailsIcon = "oi oi-caret-bottom";

        InvokeAsync(StateHasChanged);
    }

    protected void Update()
    {
        Console.WriteLine($"Updating company: {Company.CompanyName}");
        EditModal.Show();
    }

    protected void Delete()
    {
        Console.WriteLine($"Deleting company: {Company.CompanyName}");
        DeleteModal.Show();
    }

    public async Task CompanyDeleted(CompanyDTO company)
    {
        Console.WriteLine($"{company.CompanyName} was removed from the database");
        await OnRowChanged.InvokeAsync(true);
    }

    public async Task CompanyUpdated(CompanyDTO company)
    {
        Console.WriteLine($"{company.CompanyName} was updated in the database");
        await OnRowChanged.InvokeAsync(true);
    }
}
